
Entity Framework 
Agenda:
1.DI
2.Services
3.Repository Pattern
4.ORM using Entity Framework

5.Writing CRUD REST API using 
	web api Controllers, 
	services,
	entity framework, 
	Database
	
Difference between 

Windwos compatible .net (only windows)
Cross Platform .net   (linux, windows, mac OS)

  asp.net MVC .NET Framework 
Vs. 
asp.net MVC Core





asp.net MVC .NET Framework

 1.Configuration file-----web.config
 2.Startup file------global.asax
		 	Application Life cycle event handlers
				Application_Start()
				Application_BeginAuthenticateRequest()
				Session_Start()
				Session_End()
				Application_End()
				Application_Error()

 3.HTTP Pipeline-----HTTP Modules
		    HttpAuthentication module
		    HttpOutputCache module
		    SessionState module
		    Personalization Module
		    .....
		    .....
		   Request handling is done through HTTP handlers 
			(.aspx pages, .ascx user controls,http handlers
			 Controllers)

________________________________________________________________________________________________________
Cross Platform .net 

asp.net MVC Core
   1.Configuration file-----appsettings.json
   2.Startup file------program.cs--Kestral Server Services Configuration
			Startup Code
			a.Create Kestral Server
			b.Add Services to Kestral Server
			c.Set Up Middlware to Kestral Server
			d.Map Controllers and Route
			e.Keep Kestral Server Listening on port number
   3.HTTP Pipeline-----Middleware	
		   HSTS
		   HTTPS
		   Static Files
		   CookiesPolicy
		   Authentication
		   Session
		   MVCEndPoint
		 Request is handling is done thruogh Controllers


Building Enterprise Web Applications
SOC: Separation of Concern
AOP: Aspect Oriented Programming
Software Design Principles:
	DRY, Hollywood, KISS, SOLID,etc.

SOLID Design Principle:
S:
O:
L:
I:
D:Dependency Injection
ependency Injection (DI)

 Differnt types of DI
  1.Getter Setter Dependency Injection

	//Connected Data Access Mode
	//Create dependencies
	string conString="Server=localhost, user=root, password=....";
	string query="SELECT * FROM employees";

	
	MySqlConnection con=new MySqlConnection();
	MySqlCommand cmd =new MySqlCommand();
	
	//Injecting Dependencies using property initialization
	
	con.ConnectionString=conString;
	cmd.CommandText=query
	
	try{
		con.Open();
		MySqlDataReader reader=cmd.ExecuteReader();
		while(reader.Read())
		{
			....................
			...................
		}
	}
	catch(Exception e){
		throw e;
	}
	finally{
		con.Close();
	}

  2.Method Dependency Injection

	//Disconnected  Data Access Mode
	MySqlConnection con=new MySqlConnection(conString); //Constructor DI
	MySqlCommand cmd=new MySqlCommand();
	cmd.Connection=con;

	MySqlDataAdapter da=new MySqlDataAdapter(cmd);
	
	DataSet ds=new DataSet();  //Initially DataSet will be empty
	
	//For Adapter to work, dataSet is a Dependency

	da.Fill(ds);	// This is example of Method Dependency Injection
	//After Fill method invocation DataSet will be filled with data fetched from databse

	//extracting data from DataSet
	//creating collections of products from Each dataRow
	//return collection of Products











3.Constructor Dependency Injection
	//Connected Data Access Mode in C#
	//These are dependencies for database code execution

	string conString=@"server=localhost; user=root; password=password; database=northwind";
	string query="SELECT * FROM employees";

	//dependencies should be injected inside Connection object and Command Object
	//These two strings are getting injected at the time of constructor

	MySqlConnection con=new MySqlConnection(conString); //Constructor DI
	MySqlCommand cmd=new MySqlCommand(query, con)	    //Constructor DI

	try{
		con.Open();
		MySqlDataReader reader=cmd.ExecuteReader();
		while(reader.Read())
		{
			....................
			...................
		}

	}
	catch(Exeption ee){
		throw ex;
	}
	finally{
		con.Close()
	}





















ASP.NET Core is  DI complaint MVC Code Base
Program.cs
	Startup Code
		a.Create Kestral Server
		b.Add Services to Kestral Server
		c.Set Up Middlware to Kestral Server
		d.Map Controllers and Route
		e.Keep Kestral Server Listening on port number

Transient objects are always different; 
	a new instance is provided to every controller and every service.

Scoped objects are the same within a request, 
	but different across different requests.

Singleton objects are the same for every object and every request.

1.Repository Pattern

ORM---Entity Framework

	Entity Framework  Core (ORM mapping Technique)


Why ORM ?
	.minimal code Strategy
	.automatic query generation
	
 FrontEnd Logic:
		JS, HTML, CSS ,JS Framework
		Functional Programming
			Controls, Data Binding, Asychrnous Data Access
			DOM manipulation

 Web Application Logic:
		Object Oriented Way
		  Object centric
		  Class, Interface, Events, Delegate
		  Collections

		 Web Site Hosting
			State management
			Caching
			Authentication,
			Authorization
			Localization
		 Web API

		Database Connectivity Logic (External DB Connectors)


 Backend Logic
		RDBMS:

		Entity
		Entity Relationship
		Database
		Tables
		Records





	ORM:

		Database----------DBContext
		Tables------------DBSet
		contstraints------association relationship between DBSet Object


		ECommerceDB--------ECommerceDBContext	-----------------Entity(POCO)
		Customers	  		DBSet<Customer>		 Customer
		Products	  		DBSet<Product>		 Product
		Orders		  		DbSet<Order>		 Order
		Payments	  		DbSet<Payment>		 Payment




1.Create database script
2.Create web api project using Web API project template
3.Define Entity Classes in Models folder which are mapped with respective Table
4.Define CollectionContext class  or EF configuration
















JWTToken Based Authentication















